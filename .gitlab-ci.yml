stages:
  - apply
image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
before_script:
  - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - rm -rf .terraform
  - terraform --version
  - terraform init
apply:
  stage: apply
  script:
    #TagSets
    - echo "Apply Tag Sets"
    - |
      terraform \
      -chdir=management_instance/tenants/tagsets/s3backend \
      init \
      -backend-config="key=tagsets" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/tenants/tagsets/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    # Accounts
    - echo "Apply Accounts"
    - |
      terraform \
      -chdir=shared/accounts/aws/s3backend \
      init \
      -backend-config="key=aws_account" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=shared/accounts/aws/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE \
      -var=aws_access_key=$AWS_ACCESS_KEY_ID \
      -var=aws_secret_key=$AWS_SECRET_ACCESS_KEY
    # Environments
    - echo "Apply Environments"
    - |
      terraform \
      -chdir=management_instance/environments/production/s3backend \
      init \
      -backend-config="key=environments" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/environments/production/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    # Feeds
    - echo "Apply Feeds"
    - |
      terraform \
      -chdir=shared/feeds/github/s3backend \
      init \
      -backend-config="key=feeds" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=shared/feeds/github/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE \
      -var=feed_github_password=$GH_TOKEN
    - |
      terraform \
      -chdir=shared/feeds/dockerhub/s3backend \
      init \
      -backend-config="key=dockerhubfeeds" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=shared/feeds/dockerhub/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE \
      -var=docker_username=$DOCKER_USERNAME \
      -var=docker_password=$DOCKER_PASSWORD
    # Library Variable Sets
    - echo "Apply Library Variable Sets"
    - |
      terraform \
      -chdir=management_instance/variables/octopus_server/s3backend \
      init \
      -backend-config="key=docker_hub_variables" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/variables/octopus_server/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    - |
      terraform \
      -chdir=management_instance/variables/docker/s3backend \
      init \
      -backend-config="key=octopus_docker_variables" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/variables/docker/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    - |
      terraform \
      -chdir=management_instance/variables/azure/s3backend \
      init \
      -backend-config="key=octopus_azure_variables" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/variables/azure/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    - |
      terraform \
      -chdir=management_instance/variables/config_as_code/s3backend \
      init \
      -backend-config="key=octopus_cac_variables" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/variables/config_as_code/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    - |
      terraform \
      -chdir=management_instance/project_groups/azure_web_app/s3backend \
      init \
      -backend-config="key=octopus_azure_project_group" \
      -backend-config="bucket=$BUCKET_NAME" \
      -backend-config="region=$BUCKET_REGION"
    - |
      terraform \
      -chdir=management_instance/project_groups/azure_web_app/s3backend \
      apply \
      -auto-approve \
      -var=octopus_server=$OCTOPUS_URL \
      -var=octopus_apikey=$OCTOPUS_API_KEY \
      -var=octopus_space_id=$OCTOPUS_SPACE
    # Projects
    - echo "Apply projects"
    - |
      declare -a arr=("Initialise Space" "Provision Unmanaged Azure Web App" "Provision Unmanaged Azure Web App (CaC)" "Provision Azure Logs")
      
      for i in "${arr[@]}"
      do
        # Reset the project versioning, as package based versioning prevents steps from being cleared
        PROJECT_ID=$(curl --silent -G --data-urlencode "name=$i" -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/projects | jq -r ".Items[0].Id")
        if [[ -n "${PROJECT_ID}" && "${PROJECT_ID}" != "null" ]]; then
          DEPLOYMENT_SETTINGS=$(curl --silent -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/projects/${PROJECT_ID}/DeploymentSettings)
          DEPLOYMENT_SETTINGS_BASIC_VERSIONING=$(echo ${DEPLOYMENT_SETTINGS} | jq '.VersioningStrategy.Template = "#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.NextPatch}" | .VersioningStrategy.DonorPackageStepId = null | .VersioningStrategy.DonorPackage = null')
          NEW_DEPLOYMENT_SETTINGS=$(curl --silent -X PUT -d "${DEPLOYMENT_SETTINGS_BASIC_VERSIONING}" -H "Content-Type: application/json" -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/projects/${PROJECT_ID}/DeploymentSettings)
        fi
      
        # Clear the steps
        DEPLOYMENT_PROCESS_ID=$(curl --silent -G --data-urlencode "name=$i" -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/projects | jq -r ".Items[0].DeploymentProcessId")
        if [[ -n "${DEPLOYMENT_PROCESS_ID}" && "${DEPLOYMENT_PROCESS_ID}" != "null" ]]; then
          echo "Emptying project deploy process ${DEPLOYMENT_PROCESS_ID} for project $i"
          DEPLOYMENT_PROCESS=$(curl --silent -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/deploymentprocesses/${DEPLOYMENT_PROCESS_ID})
          EMPTY_DEPLOYMENT_PROCESS=$(echo ${DEPLOYMENT_PROCESS} | jq 'del(.Steps[])')
          NEW_DEPLOYMENT_PROCESS=$(curl --silent -X PUT -d "${EMPTY_DEPLOYMENT_PROCESS}" -H "Content-Type: application/json" -H "X-Octopus-ApiKey: $OCTOPUS_API_KEY" $OCTOPUS_URL/api/$OCTOPUS_SPACE/deploymentprocesses/${DEPLOYMENT_PROCESS_ID})
        fi
      done