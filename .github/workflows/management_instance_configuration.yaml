name: Configure Management Instance
'on':
  workflow_dispatch: {}
  push: {}
env:
  TF_VAR_octopus_server: ${{ secrets.OCTOPUS_URL }}
  TF_VAR_octopus_apikey: ${{ secrets.OCTOPUS_API_KEY }}
  TF_VAR_octopus_space_id: ${{ secrets.OCTOPUS_SPACE }}
  TF_VAR_cac_username: ${{ secrets.CAC_GH_USERNAME }}
  TF_VAR_cac_password: ${{ secrets.CAC_GH_TOKEN }}
  TF_VAR_cac_url: ${{ secrets.CAC_GH_URL }}
  TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  TF_VAR_azure_application_id: ${{ secrets.AZURE_APPLICATION_ID }}
  TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_azure_password: ${{ secrets.AZURE_PASSWORD }}
  TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_docker_username: ${{ secrets.DOCKER_USERNAME }}
  TF_VAR_docker_password: ${{ secrets.DOCKER_PASSWORD }}
  TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
  TF_VAR_bucket_region: ${{ secrets.BUCKET_REGION }}
  TF_VAR_feed_github_password: ${{ secrets.GH_TOKEN }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: hashicorp/setup-terraform@v2

      # GitCreds
      - name: Apply the git creds module
        run: |
          terraform init \
          -backend-config="key=gitcreds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"

          terraform apply -auto-approve -input=false
        working-directory: shared/gitcreds/githubcreds/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Tagsets
      - name: Apply the tagset module
        run: |
          terraform init \
          -backend-config="key=tagsets" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/tenants/tagsets/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Accounts
      - name: Apply the aws accounts module
        run: |
          terraform init \
          -backend-config="key=aws_account" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/accounts/aws/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure accounts module
        run: |
          terraform init \
          -backend-config="key=azure_account" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/accounts/azure/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Environments
      - name: Apply the managed instance reference environments module
        run: |
          terraform init \
          -backend-config="key=managedinstanceenvironments" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/environments/dev_test_prod/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the managed instances deployment environments module
        run: |
          terraform init \
          -backend-config="key=managementinstanceenvironments" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/environments/managed_instance/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Feeds
      - name: Apply the feeds module
        run: |
          terraform init \
          -backend-config="key=feeds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/feeds/github/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the dockerhub feeds module
        run: |
          terraform init \
          -backend-config="key=dockerhubfeeds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/feeds/dockerhub/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the maven feeds module
        run: |
          terraform init \
          -backend-config="key=mavenfeeds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: shared/feeds/maven/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Library Variable Sets
      - name: Apply the octopus server variable set module
        run: |
          terraform init \
          -backend-config="key=docker_hub_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/variables/octopus_server/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the docker variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_docker_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/variables/docker/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_azure_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/variables/azure/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the cac variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_cac_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/variables/config_as_code/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Apply project groups
      - name: Apply the azure project group
        run: |
          terraform init \
          -backend-config="key=octopus_azure_project_group" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/project_groups/azure_web_app/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the templates project group
        run: |
          terraform init \
          -backend-config="key=octopus_template_project_group" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/project_groups/templates/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Projects

      - name: Apply the environments project module
        run: |
          terraform init \
          -backend-config="key=environments_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/init_space/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the managed CaC azure web app project module
        run: |
          terraform init \
          -backend-config="key=azure_web_app_unmanaged_cac" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/azure_web_app_unmanaged_cac/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the managed CaC azure web app template project module
        run: |
          terraform init \
          -backend-config="key=azure_web_app_cac_template" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/azure_web_app_cac_template/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the unmanaged azure web app project module
        run: |
          terraform init \
          -backend-config="key=unmanaged_azure_web_app_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/azure_web_app_unmanaged/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure web app merge project module
        run: |
          terraform init \
          -backend-config="key=unmanaged_azure_web_app_merge_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/merge_changes/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure web app test merge project module
        run: |
          terraform init \
          -backend-config="key=unmanaged_azure_web_app_test_merge_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/projects/test_merge_changes/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}


      # Tenants
      - name: Apply the Europe tenants module
        run: |
          terraform init \
          -backend-config="key=tenants" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/tenants/europe/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the America tenants module
        run: |
          terraform init \
          -backend-config="key=tenants_america" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve -input=false
        working-directory: management_instance/tenants/america/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
permissions:
  id-token: write
  checks: write
  contents: write
