name: Configure Management Instance
'on':
  workflow_dispatch: {}
  push: {}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: hashicorp/setup-terraform@v2

      # Tagsets
      - name: Apply the tagset module
        run: |
          terraform init \
          -backend-config="key=tagsets" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/tenants/tagsets/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Accounts
      - name: Apply the variable set module
        run: |
          terraform init \
          -backend-config="key=aws_account" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=aws_access_key=${{ secrets.AWS_ACCESS_KEY }} \
          -var=aws_secret_key=${{ secrets.AWS_SECRET_KEY }}
        working-directory: shared/accounts/aws/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Environments
      - name: Apply the environments module
        run: |
          terraform init \
          -backend-config="key=environments" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/environments/production/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Feeds
      - name: Apply the feeds module
        run: |
          terraform init \
          -backend-config="key=feeds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=feed_github_password=${{ secrets.GH_TOKEN }}
        working-directory: shared/feeds/github/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the dockerhub feeds module
        run: |
          terraform init \
          -backend-config="key=dockerhubfeeds" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=docker_username=${{ secrets.DOCKER_USERNAME }} \
          -var=docker_password=${{ secrets.DOCKER_PASSWORD }}
        working-directory: shared/feeds/dockerhub/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Library Variable Sets
      - name: Apply the octopus server variable set module
        run: |
          terraform init \
          -backend-config="key=docker_hub_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/variables/octopus_server/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the docker variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_docker_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/variables/docker/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_azure_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/variables/azure/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the cac variable set module
        run: |
          terraform init \
          -backend-config="key=octopus_cac_variables" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/variables/config_as_code/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the azure project group
        run: |
          terraform init \
          -backend-config="key=octopus_azure_project_group" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }}
        working-directory: management_instance/project_groups/azure_web_app/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Projects

      # There is a bug with the Terraform provider that means step package references are incorrectly
      # associated with new steps. The easiest fix is to delete the projects before recreating them.
      # Note that you will likely want to remove this step if you intend to update projects via Terraform, as this
      # deletes project releases.
      - name: Delete existing projects
        run: |
          declare -a arr=("Provision Hello World" "Initialise Space" "Provision Unmanaged Azure Web App" "Provision Unmanaged Azure Web App (CaC)" "Provision Azure Logs")

          for i in "${arr[@]}"
          do
            # Reset the project versioning, as package based versioning prevents steps from being cleared
            PROJECT_ID=$(curl --silent -G --data-urlencode "name=$i" -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/projects | jq -r ".Items[0].Id")
            if [[ -n "$PROJECT_ID" && "$PROJECT_ID" != "null" ]]; then
              DEPLOYMENT_SETTINGS=$(curl --silent -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/projects/${PROJECT_ID}/DeploymentSettings)
              DEPLOYMENT_SETTINGS_BASIC_VERSIONING=$(echo $PROJECT_JSON | jq '.VersioningStrategy.Template = "#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.NextPatch}" | .VersioningStrategy.DonorPackageStepId = null | .VersioningStrategy.DonorPackage = null')
              echo "Project ID: ${PROJECT_ID}"
              echo "Project JSON: ${DEPLOYMENT_SETTINGS_BASIC_VERSIONING}"
              NEW_DEPLOYMENT_SETTINGS=$(curl --silent -X PUT -d "${DEPLOYMENT_SETTINGS_BASIC_VERSIONING}" -H "Content-Type: application/json" -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/projects/${PROJECT_ID}/DeploymentSettings)
              echo $NEW_PROJECT
            fi
          
            # Clear the steps
            DEPLOYMENT_PROCESS_ID=$(curl --silent -G --data-urlencode "name=$i" -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/projects | jq -r ".Items[0].DeploymentProcessId")
            if [[ -n "$DEPLOYMENT_PROCESS_ID" && "$DEPLOYMENT_PROCESS_ID" != "null" ]]; then
              echo "Emptying project deploy process $DEPLOYMENT_PROCESS_ID for project $i"
              DEPLOYMENT_PROCESS=$(curl --silent -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/deploymentprocesses/${DEPLOYMENT_PROCESS_ID})
              EMPTY_DEPLOYMENT_PROCESS=$(echo ${DEPLOYMENT_PROCESS} | jq 'del(.Steps[])')
              NEW_DEPLOYMENT_PROCESS=$(curl --silent -X PUT -d "${EMPTY_DEPLOYMENT_PROCESS}" -H "Content-Type: application/json" -H "X-Octopus-ApiKey: ${{ secrets.OCTOPUS_API_KEY }}" ${{ secrets.OCTOPUS_URL }}/api/${{ secrets.OCTOPUS_SPACE }}/deploymentprocesses/${DEPLOYMENT_PROCESS_ID})
            fi
          done
        shell: bash

      - name: Apply the azure logs project module
        run: |
          terraform init \
          -backend-config="key=azure_logs_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=bucket_name=${{ secrets.BUCKET_NAME }} \
          -var=bucket_region=${{ secrets.BUCKET_REGION }}
        working-directory: management_instance/projects/azure_logs/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the environments project module
        run: |
          terraform init \
          -backend-config="key=environments_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=bucket_name=${{ secrets.BUCKET_NAME }} \
          -var=bucket_region=${{ secrets.BUCKET_REGION }}
        working-directory: management_instance/projects/init_space/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the managed CaC azure web app project module
        run: |
          terraform init \
          -backend-config="key=azure_web_app_unmanaged_cac" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=bucket_name=${{ secrets.BUCKET_NAME }} \
          -var=bucket_region=${{ secrets.BUCKET_REGION }}
        working-directory: management_instance/projects/azure_web_app_unmanaged_cac/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the unmanaged azure web app project module
        run: |
          terraform init \
          -backend-config="key=unmanaged_azure_web_app_project" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=bucket_name=${{ secrets.BUCKET_NAME }} \
          -var=bucket_region=${{ secrets.BUCKET_REGION }}
        working-directory: management_instance/projects/azure_web_app_unmanaged/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      # Tenants
      - name: Apply the Europe tenants module
        run: |
          terraform init \
          -backend-config="key=tenants" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=docker_username=${{ secrets.DOCKER_USERNAME }} \
          -var=docker_password=${{ secrets.DOCKER_PASSWORD }} \
          -var=azure_application_id=${{ secrets.AZURE_APPLICATION_ID }} \
          -var=azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          -var=azure_password=${{ secrets.AZURE_PASSWORD }} \
          -var=azure_tenant_id=${{ secrets.AZURE_TENANT_ID }} \
          -var=cac_username=${{ secrets.CAC_GH_USERNAME }} \
          -var=cac_password=${{ secrets.CAC_GH_TOKEN }} \
          -var=cac_url=${{ secrets.CAC_GH_URL }}
        working-directory: management_instance/tenants/europe/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Apply the America tenants module
        run: |
          terraform init \
          -backend-config="key=tenants_america" \
          -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
          -backend-config="region=${{ secrets.BUCKET_REGION }}"
          
          terraform apply -auto-approve \
          -var=octopus_server=${{ secrets.OCTOPUS_URL }} \
          -var=octopus_apikey=${{ secrets.OCTOPUS_API_KEY }} \
          -var=octopus_space_id=${{ secrets.OCTOPUS_SPACE }} \
          -var=docker_username=${{ secrets.DOCKER_USERNAME }} \
          -var=docker_password=${{ secrets.DOCKER_PASSWORD }} \
          -var=azure_application_id=${{ secrets.AZURE_APPLICATION_ID }} \
          -var=azure_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
          -var=azure_password=${{ secrets.AZURE_PASSWORD }} \
          -var=azure_tenant_id=${{ secrets.AZURE_TENANT_ID }} \
          -var=cac_username=${{ secrets.CAC_GH_USERNAME }} \
          -var=cac_password=${{ secrets.CAC_GH_TOKEN }} \
          -var=cac_url=${{ secrets.CAC_GH_URL }}
        working-directory: management_instance/tenants/america/s3backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
permissions:
  id-token: write
  checks: write
  contents: write
